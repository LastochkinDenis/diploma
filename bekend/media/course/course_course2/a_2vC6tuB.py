data:text/x-python;base64,IiIiVGhlIExpbmtlZExpc3QgY29kZSBmcm9tIGJlZm9yZSBpcyBwcm92aWRlZCBiZWxvdy4KQWRkIHRocmVlIGZ1bmN0aW9ucyB0byB0aGUgTGlua2VkTGlzdC4KImdldF9wb3NpdGlvbiIgcmV0dXJucyB0aGUgZWxlbWVudCBhdCBhIGNlcnRhaW4gcG9zaXRpb24uClRoZSAiaW5zZXJ0IiBmdW5jdGlvbiB3aWxsIGFkZCBhbiBlbGVtZW50IHRvIGEgcGFydGljdWxhcgpzcG90IGluIHRoZSBsaXN0LgoiZGVsZXRlIiB3aWxsIGRlbGV0ZSB0aGUgZmlyc3QgZWxlbWVudCB3aXRoIHRoYXQKcGFydGljdWxhciB2YWx1ZS4KVGhlbiwgdXNlICJUZXN0IFJ1biIgYW5kICJTdWJtaXQiIHRvIHJ1biB0aGUgdGVzdCBjYXNlcwphdCB0aGUgYm90dG9tLiIiIgoKCiMgY2xhc3MgRWxlbWVudChvYmplY3QpOgojICAgICBkZWYgX19pbml0X18oc2VsZiwgdmFsdWUpOgojICAgICAgICAgc2VsZi52YWx1ZSA9IHZhbHVlCiMgICAgICAgICBzZWxmLm5leHQgPSBOb25lCiMKIwojIGNsYXNzIExpbmtlZExpc3Qob2JqZWN0KToKIyAgICAgZGVmIF9faW5pdF9fKHNlbGYsIGhlYWQ9Tm9uZSk6CiMgICAgICAgICBzZWxmLmhlYWQgPSBoZWFkCiMKIyAgICAgZGVmIGFwcGVuZChzZWxmLCBuZXdfZWxlbWVudCk6CiMgICAgICAgICBjdXJyZW50ID0gc2VsZi5oZWFkCiMgICAgICAgICAjIHByaW50KHNlbGYuaGVhZC52YWx1ZSwgc2VsZi5oZWFkLm5leHQsICctJywgbmV3X2VsZW1lbnQudmFsdWUsIG5ld19lbGVtZW50Lm5leHQsIHNlcD0nLycpCiMgICAgICAgICBpZiBzZWxmLmhlYWQ6CiMgICAgICAgICAgICAgd2hpbGUgY3VycmVudC5uZXh0OgojICAgICAgICAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC5uZXh0CiMgICAgICAgICAgICAgY3VycmVudC5uZXh0ID0gbmV3X2VsZW1lbnQKIyAgICAgICAgIGVsc2U6CiMgICAgICAgICAgICAgc2VsZi5oZWFkID0gbmV3X2VsZW1lbnQKIwojICAgICBkZWYgZ2V0X3Bvc2l0aW9uKHNlbGYsIHBvc2l0aW9uKToKIyAgICAgICAgICIiIkdldCBhbiBlbGVtZW50IGZyb20gYSBwYXJ0aWN1bGFyIHBvc2l0aW9uLgojICAgICAgICAgQXNzdW1lIHRoZSBmaXJzdCBwb3NpdGlvbiBpcyAiMSIuCiMgICAgICAgICBSZXR1cm4gIk5vbmUiIGlmIHBvc2l0aW9uIGlzIG5vdCBpbiB0aGUgbGlzdC4iIiIKIyAgICAgICAgIGVsZW1lbnQgPSBzZWxmLmhlYWQKIyAgICAgICAgIGZvciBwb3NpdCBpbiByYW5nZSgxLCBwb3NpdGlvbiArIDEpOgojICAgICAgICAgICAgIGlmIHBvc2l0ID09IHBvc2l0aW9uOgojICAgICAgICAgICAgICAgICByZXR1cm4gZWxlbWVudAojCiMgICAgICAgICAgICAgZWxlbWVudCA9IGVsZW1lbnQubmV4dAojCiMgICAgICAgICAgICAgaWYgZWxlbWVudCBpcyBOb25lOgojICAgICAgICAgICAgICAgICBicmVhawojICAgICAgICAgcmV0dXJuIE5vbmUKIwojICAgICBkZWYgaW5zZXJ0KHNlbGYsIG5ld19lbGVtZW50LCBwb3NpdGlvbik6CiMgICAgICAgICAiIiJJbnNlcnQgYSBuZXcgbm9kZSBhdCB0aGUgZ2l2ZW4gcG9zaXRpb24uCiMgICAgICAgICBBc3N1bWUgdGhlIGZpcnN0IHBvc2l0aW9uIGlzICIxIi4KIyAgICAgICAgIEluc2VydGluZyBhdCBwb3NpdGlvbiAzIG1lYW5zIGJldHdlZW4KIyAgICAgICAgIHRoZSAybmQgYW5kIDNyZCBlbGVtZW50cy4iIiIKIyAgICAgICAgIG9sZF9lbGVtZW50ID0gc2VsZi5nZXRfcG9zaXRpb24ocG9zaXRpb24pCiMgICAgICAgICBiZWFrX2VsZW1lbnQgPSBzZWxmLmdldF9wb3NpdGlvbihwb3NpdGlvbiAtIDEpCiMgICAgICAgICBiZWFrX2VsZW1lbnQubmV4dCA9IG5ld19lbGVtZW50CiMgICAgICAgICBuZXdfZWxlbWVudC5uZXh0ID0gb2xkX2VsZW1lbnQKIwojCiMgICAgIGRlZiBkZWxldGUoc2VsZiwgdmFsdWUpOgojICAgICAgICAgIiIiRGVsZXRlIHRoZSBmaXJzdCBub2RlIHdpdGggYSBnaXZlbiB2YWx1ZS4iIiIKIyAgICAgICAgIGlmIHZhbHVlID09IDE6CiMgICAgICAgICAgICAgc2VsZi5oZWFkID0gc2VsZi5nZXRfcG9zaXRpb24oMikKIyAgICAgICAgIGlmIHZhbHVlID4gMToKIyAgICAgICAgICAgICBkZWxldGVfZWxlbWVudCA9IHNlbGYuZ2V0X3Bvc2l0aW9uKHZhbHVlKQojICAgICAgICAgICAgIGlmIGRlbGV0ZV9lbGVtZW50Lm5leHQgaXMgTm9uZToKIyAgICAgICAgICAgICAgICAgc2VsZi5nZXRfcG9zaXRpb24odmFsdWUgLSAxKS5uZXh0ID0gTm9uZQojICAgICAgICAgICAgIGVsc2U6CiMgICAgICAgICAgICAgICAgIGJlYWtfZWxlbWVudCA9IHNlbGYuZ2V0X3Bvc2l0aW9uKHZhbHVlIC0gMSkKIyAgICAgICAgICAgICAgICAgYmVha19lbGVtZW50Lm5leHQgPSBzZWxmLmdldF9wb3NpdGlvbih2YWx1ZSArIDEpCiMKIwojICMgVGVzdCBjYXNlcwojICMgU2V0IHVwIHNvbWUgRWxlbWVudHMKIyBlMSA9IEVsZW1lbnQoMSkKIyBlMiA9IEVsZW1lbnQoMikKIyBlMyA9IEVsZW1lbnQoMykKIyBlNCA9IEVsZW1lbnQoNCkKIwojICMgU3RhcnQgc2V0dGluZyB1cCBhIExpbmtlZExpc3QKIyBsbCA9IExpbmtlZExpc3QoZTEpCiMgbGwuYXBwZW5kKGUyKQojIGxsLmFwcGVuZChlMykKIwojICMgVGVzdCBnZXRfcG9zaXRpb24KIyAjIFNob3VsZCBwcmludCAzCiMgcHJpbnQobGwuaGVhZC5uZXh0Lm5leHQudmFsdWUpCiMgIyBTaG91bGQgYWxzbyBwcmludCAzCiMgcHJpbnQobGwuZ2V0X3Bvc2l0aW9uKDMpLnZhbHVlKQojCiMgIyBUZXN0IGluc2VydAojIGxsLmluc2VydChlNCwzKQojICMgU2hvdWxkIHByaW50IDQgbm93CiMgcHJpbnQobGwuZ2V0X3Bvc2l0aW9uKDMpLnZhbHVlKQojCiMgIyBUZXN0IGRlbGV0ZQojIGxsLmRlbGV0ZSgxKQojICMgU2hvdWxkIHByaW50IDIgbm93CiMgcHJpbnQobGwuZ2V0X3Bvc2l0aW9uKDEpLnZhbHVlKQojICMgU2hvdWxkIHByaW50IDQgbm93CiMgcHJpbnQobGwuZ2V0X3Bvc2l0aW9uKDIpLnZhbHVlKQojICMgU2hvdWxkIHByaW50IDMgbm93CiMgcHJpbnQobGwuZ2V0X3Bvc2l0aW9uKDMpLnZhbHVlKQojIGxsLmRlbGV0ZSgyKQojIHByaW50KGxsLmdldF9wb3NpdGlvbigyKS5uZXh0KQoKIiIiQWRkIGEgY291cGxlIG1ldGhvZHMgdG8gb3VyIExpbmtlZExpc3QgY2xhc3MsCmFuZCB1c2UgdGhhdCB0byBpbXBsZW1lbnQgYSBTdGFjay4KWW91IGhhdmUgNCBmdW5jdGlvbnMgYmVsb3cgdG8gZmlsbCBpbjoKaW5zZXJ0X2ZpcnN0LCBkZWxldGVfZmlyc3QsIHB1c2gsIGFuZCBwb3AuClRoaW5rIGFib3V0IHRoaXMgd2hpbGUgeW91J3JlIGltcGxlbWVudGluZzoKd2h5IGlzIGl0IGVhc2llciB0byBhZGQgYW4gImluc2VydF9maXJzdCIKZnVuY3Rpb24gdGhhbiBqdXN0IHVzZSAiYXBwZW5kIj8iIiIKCgpjbGFzcyBFbGVtZW50KG9iamVjdCk6CiAgICBkZWYgX19pbml0X18oc2VsZiwgdmFsdWUpOgogICAgICAgIHNlbGYudmFsdWUgPSB2YWx1ZQogICAgICAgIHNlbGYubmV4dCA9IE5vbmUKCgpjbGFzcyBMaW5rZWRMaXN0KG9iamVjdCk6CiAgICBkZWYgX19pbml0X18oc2VsZiwgaGVhZD1Ob25lKToKICAgICAgICBzZWxmLmhlYWQgPSBoZWFkCgogICAgZGVmIGFwcGVuZChzZWxmLCBuZXdfZWxlbWVudCk6CiAgICAgICAgY3VycmVudCA9IHNlbGYuaGVhZAogICAgICAgIGlmIHNlbGYuaGVhZDoKICAgICAgICAgICAgd2hpbGUgY3VycmVudC5uZXh0OgogICAgICAgICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQubmV4dAogICAgICAgICAgICBjdXJyZW50Lm5leHQgPSBuZXdfZWxlbWVudAogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHNlbGYuaGVhZCA9IG5ld19lbGVtZW50CgogICAgZGVmIGluc2VydF9maXJzdChzZWxmLCBuZXdfZWxlbWVudCk6CiAgICAgICAgIkluc2VydCBuZXcgZWxlbWVudCBhcyB0aGUgaGVhZCBvZiB0aGUgTGlua2VkTGlzdCIKICAgICAgICBvbGRfZWxlbWVudCA9IHNlbGYuaGVhZAogICAgICAgIHNlbGYuaGVhZCA9IG5ld19lbGVtZW50CiAgICAgICAgc2VsZi5oZWFkLm5leHQgPSBvbGRfZWxlbWVudAoKICAgICMgZGVmIGRlbGV0ZV9maXJzdChzZWxmKToKICAgICMgICAgICJEZWxldGUgdGhlIGZpcnN0IChoZWFkKSBlbGVtZW50IGluIHRoZSBMaW5rZWRMaXN0IGFzIHJldHVybiBpdCIKICAgICMgICAgIGxhc3RfZWxlbWVudCA9IHNlbGYuaGVhZAogICAgIwogICAgIyAgICAgaWYgc2VsZi5oZWFkOgogICAgIwogICAgIyAgICAgICAgIHNlbGYuaGVhZCA9IGxhc3RfZWxlbWVudC5uZXh0CiAgICAjICAgICAgICAgcmV0dXJuIGxhc3RfZWxlbWVudAogICAgIyAgICAgcmV0dXJuIE5vbmUKCiAgICBkZWYgZGVsZXRlX2ZpcnN0KHNlbGYpOgogICAgICAgICJEZWxldGUgdGhlIGZpcnN0IChoZWFkKSBlbGVtZW50IGluIHRoZSBMaW5rZWRMaXN0IGFzIHJldHVybiBpdCIKICAgICAgICBkZWxldGVkX2VsZW1lbnQgPSBzZWxmLmhlYWQKICAgICAgICBpZiBzZWxmLmhlYWQ6CiAgICAgICAgICAgIHNlbGYuaGVhZCA9IGRlbGV0ZWRfZWxlbWVudC5uZXh0CiAgICAgICAgICAgIGRlbGV0ZWRfZWxlbWVudC5uZXh0ID0gTm9uZQogICAgICAgIHJldHVybiBkZWxldGVkX2VsZW1lbnQKCgpjbGFzcyBTdGFjayhvYmplY3QpOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIHRvcD1Ob25lKToKICAgICAgICBzZWxmLmxsID0gTGlua2VkTGlzdCh0b3ApCgogICAgZGVmIHB1c2goc2VsZiwgbmV3X2VsZW1lbnQpOgogICAgICAgICJQdXNoIChhZGQpIGEgbmV3IGVsZW1lbnQgb250byB0aGUgdG9wIG9mIHRoZSBzdGFjayIKICAgICAgICBzZWxmLmxsLmluc2VydF9maXJzdChuZXdfZWxlbWVudCkKCiAgICBkZWYgcG9wKHNlbGYpOgogICAgICAgICJQb3AgKHJlbW92ZSkgdGhlIGZpcnN0IGVsZW1lbnQgb2ZmIHRoZSB0b3Agb2YgdGhlIHN0YWNrIGFuZCByZXR1cm4gaXQiCiAgICAgICAgcmV0dXJuIHNlbGYubGwuZGVsZXRlX2ZpcnN0KCkKCgojIFRlc3QgY2FzZXMKIyBTZXQgdXAgc29tZSBFbGVtZW50cwplMSA9IEVsZW1lbnQoMSkKZTIgPSBFbGVtZW50KDIpCmUzID0gRWxlbWVudCgzKQplNCA9IEVsZW1lbnQoNCkKCiMgU3RhcnQgc2V0dGluZyB1cCBhIFN0YWNrCnN0YWNrID0gU3RhY2soZTEpCgojIFRlc3Qgc3RhY2sgZnVuY3Rpb25hbGl0eQpzdGFjay5wdXNoKGUyKQpzdGFjay5wdXNoKGUzKQpwcmludChzdGFjay5wb3AoKS52YWx1ZSkKcHJpbnQoc3RhY2sucG9wKCkudmFsdWUpCnByaW50KHN0YWNrLnBvcCgpLnZhbHVlKQpwcmludChzdGFjay5wb3AoKSkKc3RhY2sucHVzaChlNCkKcHJpbnQoc3RhY2sucG9wKCkudmFsdWUp